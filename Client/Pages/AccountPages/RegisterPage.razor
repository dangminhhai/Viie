@page "/identity/account/register"
@layout AuthenticationLayout
@inject ILocaleStringResourceService LocaleService
<div class="container d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="row w-100">
        <div class="col-lg-4 offset-lg-4 col-md-6 offset-md-3 col-sm-8 offset-sm-2">
            <EditForm Enhance Model="User" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <div class="card bg-blue" style="background-color: rgb(0 157 222 / 20%); opacity:1; border-radius:10px">
                    <div class="d-flex justify-content-center align-items-center" style="height: 10vh; padding-top: 8px;">
                        <img class="responsive-logo" src="../images/logo/vip.png" alt="VIP Logo">
                    </div>
                    <div class="card-body">
                        <div class="form-group mt-2">
                            <SfTextBox Placeholder=@fullNameText FloatLabelType="@FloatLabelType.Auto" @bind-Value="User.Fullname"></SfTextBox>
                        </div>
                        <div class="form-group mt-2">
                            <SfTextBox Placeholder=@emailText FloatLabelType="@FloatLabelType.Auto" @bind-Value="User.Email" Type="InputType.Email"></SfTextBox>
                        </div>
                        <div class="form-group mt-2">
                            <SfTextBox Placeholder=@passwordText FloatLabelType="@FloatLabelType.Auto" @bind-Value="User.Password" Type="InputType.Password"></SfTextBox>
                        </div>
                        <div class="form-group mt-2">
                            <SfTextBox Placeholder=@confirmPasswordText FloatLabelType="@FloatLabelType.Auto" @bind-Value="User.ConfirmPassword" Type="InputType.Password"></SfTextBox>
                        </div>
                        <div class="form-group mt-3">
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }
                            else
                            {
                                <SfButton class="btn btn-primary float-end" type="submit" aria-busy="true" IsPrimary="true">
                                    <i class="bi bi-pen"></i>
                                    @registerText
                                </SfButton>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center text-white">
                            @haveAnAccountAlreadyText |
                            <a class="btn-link" href="identity/account/login">@signInText</a>
                        </span>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>


 @code {
    public bool ShowLoadingButton { get; set; } = false;
    Register User = new();

    private string? fullNameText;
    private string? emailText;
    private string? passwordText;
    private string? confirmPasswordText;
    private string? registerText;
    private string? haveAnAccountAlreadyText;
    private string? signInText;

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
        await LocaleStringAsync();
    }

    private async Task LocaleStringAsync()
    {
        fullNameText = await LocaleService.GetStringAsync("Vip.FullName", 1);
        emailText = await LocaleService.GetStringAsync("Vip.Email", 1);
        passwordText = await LocaleService.GetStringAsync("Vip.Password", 1);
        confirmPasswordText = await LocaleService.GetStringAsync("Vip.ConfirmPassword", 1);
        registerText = await LocaleService.GetStringAsync("Vip.Register", 1);
        haveAnAccountAlreadyText = await LocaleService.GetStringAsync("Vip.haveAnAccountAlreadyText", 1);
        signInText = await LocaleService.GetStringAsync("Vip.SignIn", 1);
    }


    async Task HandleRegistration()
    {
        ShowLoadingButton = true;
        var result = await accountService.CreateAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Success");
            User = new();
        }
        else
        {
            await DisplayDialog(result.Message, "Alert!");
        }
        ShowLoadingButton = false;
    }

    private async Task DisplayDialog(string content, string title)
    {
        await dialogService.AlertAsync(content, title);
    }


    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
            NavManager.NavigateTo("/home/dashboard");
    }
}

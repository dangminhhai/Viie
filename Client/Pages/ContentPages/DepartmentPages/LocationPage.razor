@implements IDisposable
@inject ILocaleStringResourceService LocaleService
@if (allState.ShowLocation)
{
   <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">@locationText</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"> </i> @addLocationText </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">@idText</th>
                                        <th scope="col">@locationText</th>
                                        <th scope="col">@descriptionText</th>
                                        <th scope="col">@actionText</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Locations is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Locations)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>@item.Description</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" 
                                                    @onclick="()=>EditClicked(item)"></i>
                                                     <i class="bi bi-trash text-danger" id="cursorStyle" 
                                                    @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">@noLocationAddedYetText</div></td>
                                        </tr>

                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<LocationDialog @ref="locationDialog"
                         HandleSaveOperationEvent="HandleSaveOperationEvent"
                         Location="Location" />



<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

@code {
    LocationDialog? locationDialog;
    Location Location = new();

    private string? locationText;
    private string? idText;
    private string? addLocationText;
    private string? descriptionText;
    private string? actionText;
    private string? updateLocationText;
    private string? noLocationAddedYetText;
    private string? titleAddText;
    private string? titleUpdateText;

    public string Title { get; set; } = "Add";
    public List<Location> Locations { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetLocations();
        await LocaleStringAsync();
        allState.Action += StateHasChanged;
    }

    private async Task LocaleStringAsync()
    {
        locationText = await LocaleService.GetStringAsync("Vip.Location", 1);
        idText = await LocaleService.GetStringAsync("Vip.Id", 1);
        addLocationText = await LocaleService.GetStringAsync("Vip.AddLocation", 1); 
        descriptionText = await LocaleService.GetStringAsync("Vip.Description", 1);
        actionText = await LocaleService.GetStringAsync("Vip.Action", 1);
        updateLocationText = await LocaleService.GetStringAsync("Vip.UpdateLocation", 1);
        noLocationAddedYetText = await LocaleService.GetStringAsync("Vip.NoLocationAddedYet", 1);
        titleAddText = await LocaleService.GetStringAsync("Vip.Add", 1);
        titleUpdateText = await LocaleService.GetStringAsync("Vip.Update", 1);
        Title = titleAddText; // Set default title
    }
    private async Task GetLocations()
    {
        Locations = await locationService.GetAll(Constants.LocationBaseUrl);
    }

    void OpenDialog()
    {
        Title = titleAddText;
        locationDialog?.OpenDialog();
    }

    //Add or Update
    private async Task HandleSaveOperationEvent(Location location)
    {
        bool successCheck = false;
        if (location.Id > 0)
        {
            var result = await locationService
            .Update(location, Constants.LocationBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await locationService
            .Insert(location, Constants.LocationBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            Location = new();
            Title = titleAddText;
            locationDialog?.ChangeTitle(titleAddText);
        }
    }

    //Edit
     private void EditClicked(Location loc)
    {   
        Title = titleUpdateText;
        locationDialog?.ChangeTitle(titleUpdateText);
        Location = loc;
        OpenDialog();
    }

    // Delete
    private async Task DeleteClicked(Location loc)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {loc.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await locationService.DeleteById(loc.Id, Constants.LocationBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetLocations();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
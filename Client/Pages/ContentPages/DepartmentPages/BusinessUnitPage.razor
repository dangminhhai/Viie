@implements IDisposable
@if (allState.ShowBusinessUnit)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">BusinessUnits</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"> </i> Add Business Unit </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Location</th>
                                        <th scope="col">Business Unit</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (BusinessUnits is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in BusinessUnits)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Location!.Name</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No Business Unit added yet!</div></td>
                                        </tr>

                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>
<BusinessUnitDialog @ref="businessUnitDialog"
                  HandleSaveOperationEvent="HandleSaveOperationEvent"
                  BusinessUnit="BusinessUnit"
                    Locations="Locations" />

@code {
    public string Title { get; set; } = "Add";
    BusinessUnitDialog? businessUnitDialog;
    BusinessUnit BusinessUnit = new();
    public List<Location> Locations { get; set; } = new();
    public List<BusinessUnit> BusinessUnits { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await GetBusinessUnits();
        await GetLocations();
        allState.Action += StateHasChanged;
    }

    private async Task GetBusinessUnits()
    {
        BusinessUnits = await businessUnitService.GetAll(Constants.BusinessUnitBaseUrl);
    }

    private async Task GetLocations()
    {
        Locations = await locationService.GetAll(Constants.LocationBaseUrl);
    }

    void AddButtonClicked()
    {
        businessUnitDialog?.ChangeTitle("Add");
        BusinessUnit = new();
        OpenDialog();
    }

    void OpenDialog()
    {
        businessUnitDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(BusinessUnit businessUnit)
    {
        bool successCheck = false;
        if (BusinessUnit.Id > 0)
        {
            var result = await businessUnitService.Update(businessUnit, Constants.BusinessUnitBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await businessUnitService.Insert(businessUnit, Constants.BusinessUnitBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            BusinessUnit = new();
            await GetBusinessUnits();
            businessUnitDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(BusinessUnit bu)
    {
        businessUnitDialog?.ChangeTitle("Update");
        BusinessUnit = bu;
        OpenDialog();
    }

    private async Task DeleteClicked(BusinessUnit bu)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {bu.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await businessUnitService.DeleteById(bu.Id, Constants.BusinessUnitBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetBusinessUnits();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
